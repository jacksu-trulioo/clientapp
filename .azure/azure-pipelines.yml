pool:
  vmImage: ubuntu-latest

trigger:
  - main
  - develop

variables:
  - name: "YARN_CACHE_FOLDER"
    value: $(Pipeline.Workspace)/.yarn
  - name: "NEXT_PUBLIC_API_BASE_URL"
    value: https://apimaz-weu-tfo-mvp-dev.azure-api.net
  - name: "NEXT_PUBLIC_AUTH0_LOGIN"
    value: /login

steps:
  - task: NodeTool@0
    inputs:
      versionSpec: "16.x"
      checkLatest: true
    displayName: "Install Node.js"

  - task: Cache@2
    inputs:
      key: '"yarn" | "$(Agent.OS)" | yarn.lock'
      restoreKeys: |
        yarn | "$(Agent.OS)"
      path: "$(YARN_CACHE_FOLDER)"
    displayName: "Cache Yarn packages"

  - task: Cache@2
    displayName: "Cache node_modules"
    inputs:
      key: node_modules | $(Agent.OS) | package.json | yarn.lock
      path: "$(System.DefaultWorkingDirectory)/node_modules"

  - task: Cache@2
    displayName: "Cache .next/cache"
    inputs:
      key: next | $(Agent.OS) | package.json | yarn.lock
      path: "$(System.DefaultWorkingDirectory)/.next/cache"

  - script: |
      yarn --frozen-lockfile
    displayName: "Install dependencies"

  - task: SonarCloudPrepare@1
    displayName: "Code Analysis (Start)"
    inputs:
      SonarCloud: "SonarCloud"
      organization: "tfo"
      scannerMode: "CLI"
      configFile: "sonar-project.properties"

  - script: |
      yarn lint:check
      yarn format:check
    displayName: "Check code style and formatting"

  - script: |
      yarn test
    displayName: "Run tests"

  # - script: |
  #     BABEL_ENV=e2e yarn build
  #   displayName: "Create instrumented production build"
  #   env:
  #     NEXT_PUBLIC_API_MOCKING: enabled
  #     NEXT_PUBLIC_API_BASE_URL: $(NEXT_PUBLIC_API_BASE_URL)
  #     NEXT_PUBLIC_AUTH0_LOGIN: $(NEXT_PUBLIC_AUTH0_LOGIN)
  #     NEXT_PUBLIC_TURNOFF_ENCRYPTION: $(NEXT_PUBLIC_TURNOFF_ENCRYPTION)
  #     NEXT_TELEMETRY_DISABLED: $(NEXT_TELEMETRY_DISABLED)

  # - script: |
  #     yarn e2e:headless
  #   displayName: "Run e2e tests"

  # - script: |
  #     yarn precover:merge
  #     yarn cover:merge
  #     yarn cover:report
  #   displayName: "Generate coverage reports"

  - task: SonarCloudAnalyze@1
    displayName: "Code Analysis (End)"

  - task: SonarCloudPublish@1
    displayName: "Code Analysis (Publish)"
    inputs:
      pollingTimeoutSec: "300"

  - script: |
      rm -rf .next .husky .storybook cypress .infra coverage 
      yarn build
    displayName: "Create optimised production build"
    env:
      NEXT_PUBLIC_API_MOCKING: disabled
      NEXT_PUBLIC_API_BASE_URL: $(NEXT_PUBLIC_API_BASE_URL)
      NEXT_PUBLIC_AUTH0_LOGIN: $(NEXT_PUBLIC_AUTH0_LOGIN)
      NEXT_PUBLIC_KEY_ENCRYPTION: $(NEXT_PUBLIC_KEY_ENCRYPTION)
  #    condition: ne(variables['Build.Reason'], 'PullRequest')

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: "."
      includeRootFolder: false
      archiveType: "zip"
      archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip"
      replaceExistingArchive: true
    condition: ne(variables['Build.Reason'], 'PullRequest')

  - task: PublishBuildArtifacts@1
    displayName: "Publish artifacts"
    condition: ne(variables['Build.Reason'], 'PullRequest')
